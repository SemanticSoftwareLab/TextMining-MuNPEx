//
// Multilingual Noun Phrase Extractor (MuNPEx)
// http://www.semanticsoftware.info/munpex
//
// French NPs
//
// Copyright (c) 2005, 2006 Michelle Khalife
// Copyright (c) 2005, 2006, 2010, 2012, 2015 Rene Witte (http://rene-witte.net)
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 3.0 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library.  If not, see <http://www.gnu.org/licenses/>.
//

Phase: FR_NP_Parts
Input: Token Number
Options: control = brill

Rule: det
(
	{Token.category == "DET"}|         // check
	{Token.category == "DET:def"}|
	{Token.category == "DET:indef"}|
	{Token.category == "DET:ART"}|
	{Token.category == "DET:PART"}|    // in tagset doc, but not encountered yet
	{Token.category == "DET:POS"}|
//	{Token.category == "PRE:det"}|     // check
	{Token.category == "PRP:det"}|
	{Token.category == "PRO:POS"}|
	{Token.category == "PRO:IND"}|
	{Token.category == "PRO:DEM"}
):det
-->
	:det.tempNP = {kind = "DET"}


Rule: mod
(
	{Token.category == "ABR"}|
	{Token.category == "ADJ"}|
	({Token.category == "ADJ"}({Token.category == "KON"}{Token.category == "ADJ"})*)|
	{Token.category == "NUM"}|
	{Number}
):mod
-->
	:mod.tempNP = {kind = "MOD"}


Rule: mod2
(
	{Token.category == "ABR"}|
	{Token.category == "ADJ"}|
	({Token.category == "ADJ"}({Token.category == "KON"}{Token.category == "ADJ"})*)|
	{Token.category == "NUM"}|
	{Number}
):mod
-->
	:mod.tempNP = {kind = "MOD2"}


Rule: pronoun
(
	{Token.category == "PRO:PER"}
):head
-->
	:head.tempNP = {kind = "HEAD", Pronoun="true"}

Rule: head
(
	{Token.category == "NAM"}|
	{Token.category == "NOM"}|
	{Token.category == "NPR"}|
):head
-->
	:head.tempNP = {kind = "HEAD", Pronoun="false"}


Rule: head
(
	{Token.Comment == "<unknown>", Token.orth == "upperInitial"}
	({Token.Comment == "<unknown>", Token.orth == "upperInitial"})*
):head
-->
	:head.tempNP = {kind = "HEAD", Pronoun="false"}
