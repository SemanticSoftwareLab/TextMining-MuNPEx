<!--======================================================================

   Multilingual Noun Phrase Extractor (MuNPEx)
   http://www.semanticsoftware.info/munpex
  
   Build file for MuNPEx
   This file will allow you to build your plugin with Ant.  

   Copyright (c) 2012, 2015 Rene Witte (http://rene-witte.net)

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 3.0 of the License, or (at your option) any later version.
  
   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.
  
   You should have received a copy of the GNU Lesser General Public
   License along with this library.  If not, see <http://www.gnu.org/licenses/>.

=======================================================================-->
<project name="MuNPEx" basedir="." default="all">

  <!-- Prevent Ant from warning about includeantruntime not being set -->
  <property name="build.sysclasspath" value="ignore" />

  <property file="build.properties" />

  <!-- software revision number -->
  <property name="release.version" value="2.0"/>
  <property file="version.properties"/>

  <!--=======================================================
    Property settings.  You should not need to edit these
    directly, if you need to set a different value for any
    property you should edit build.properties and override
    them there.
  ========================================================-->

  <!-- Name of the plugin -->
  <property name="plugin.name" value="MuNPEx"/>

  <!-- Make environment variables available -->
  <property environment="env" />

  <!-- If environment variable GATE_HOME is set, use it for
       gate.home (unless it was already set in build.properties -->
  <condition property="gate.home" value="${env.GATE_HOME}">
    <isset property="env.GATE_HOME"/>
  </condition>

  <!-- If gate.home is not set from build.properties or the 
       environment variable GATE_HOME, assume that this
       plugin is in GATE Developer's plugin directory -->
  <property name="gate.home" location="../.." />

  <!-- location of GATE lib directory - should be inferred from gate.home -->
  <property name="gate.lib" location="${gate.home}/lib" />

  <!-- location of gate.jar - should be inferred from gate.home -->
  <property name="gate.jar" location="${gate.home}/bin/gate.jar" />

  <!-- Source directory - contains the Java source files for this plugin -->
  <property name="src.dir" location="src" />

  <!-- directory to contain the compiled classes -->
  <property name="classes.dir" location="classes" />

  <!-- documentation directory -->
  <property name="doc.dir" location="doc" />

  <!-- JavaDoc documentation directory -->
  <property name="javadoc.dir" location="${doc.dir}/javadoc" />

  <!-- location for the generated JAR file -->
  <property name="jar.location" location="${plugin.name}.jar" />

  <!-- Classpath to compile - includes gate.jar, GATE/lib/*.jar and any local
       library JAR files. -->
  <path id="compile.classpath">
    <pathelement location="${gate.jar}" />
    <fileset dir="${gate.lib}">
      <include name="**/*.jar" />
      <include name="**/*.zip" />
    </fileset>
  </path>
  
  <!--====================== Targets ============================-->

  <target name="buildprops">
    <tstamp>
      <format property="builtat" pattern="yyyy-MM-dd-HH-mm-ss" timezone="America/New_York"/>
    </tstamp>        
    <exec executable="svnversion" outputproperty="svnversion"/>
    <exec executable="whoami" outputproperty="whoami"/>

    <propertyfile file="version.properties"
		  comment="This file is automatically generated - DO NOT EDIT">        
      <entry key="buildtime" value="${builtat}"/>
      <!-- <entry key="buildrepo" value="${svnversion}"/> -->
      <entry key="builder" value="${user.name}"/> 
      <entry key="release" value="${release.version}"/> 
      <!--<entry key="version" value="${release.version}"/> -->
    </propertyfile>
  </target>
  
  <!-- create build directory structure -->
  <target name="prepare" depends="buildprops">
    <mkdir dir="${classes.dir}" />
  </target>

  <!-- compile the source -->
  <target name="compile" depends="prepare">
    <javac classpathref="compile.classpath"
           srcdir="${src.dir}"
           destdir="${classes.dir}"
           debug="true"
           debuglevel="lines,source"
    	   encoding="UTF-8"
           source="1.7" />
  </target>

  <!-- copy resources (anything non-.java) from src to classes -->
  <target name="copy.resources" depends="prepare">
    <copy todir="${classes.dir}">
      <fileset dir="${src.dir}" excludes="**/*.java" />
    </copy>
  </target>

  <!-- create the JAR file -->
  <target name="jar" depends="compile, copy.resources" >
    <jar destfile="${jar.location}"
         update="false"
         basedir="${classes.dir}" />
  </target>

  <!-- remove the generated .class files -->
  <target name="clean.classes" >
    <delete dir="${classes.dir}" />
  </target>

  <!-- clean resources generated by tests -->
  <target name="clean.tests">
    <delete>
      <fileset dir="." includes="TEST*.xml" />
    </delete>
  </target>

  <!-- Clean up - remove .class and .jar files -->
  <target name="clean" depends="clean.classes, clean.tests" >
    <delete file="${jar.location}" />
  </target>

  <!-- Clean up everything, including Javadoc -->
  <target name="docclean" depends="clean, clean.javadoc" >
  </target>

  <!-- Build JavaDoc documentation -->
  <target name="doc.prepare">
    <mkdir dir="${javadoc.dir}" />
  </target>

  <!-- Clean JavaDoc documentation -->
  <target name="clean.javadoc">
    <delete dir="${javadoc.dir}" />
  </target>

  <target name="javadoc" depends="doc.prepare">
    <javadoc destdir="${javadoc.dir}" packagenames="*"
             classpathref="compile.classpath"
             encoding="UTF-8"
             windowtitle="${plugin.name} JavaDoc"
             source="1.7">
      <sourcepath>
        <pathelement location="${src.dir}" />
      </sourcepath>
      <link href="http://docs.oracle.com/javase/7/docs/api/" />
      <link href="../../../../doc/javadoc/" />
    </javadoc>
  </target>

  <!-- Build everything - the code and JavaDoc -->
  <target name="all" depends="jar, javadoc" />

  <!-- Other targets:
         build: build the plugin - just calls "jar" target
         test : run the unit tests - there aren't any
         distro.prepare: remove intermediate files that shouldn't be in the
                         distribution
  -->
  <target name="build" depends="jar" />
  <target name="test" />
  <target name="distro.prepare" depends="clean.classes, clean.tests" />
  
</project>
